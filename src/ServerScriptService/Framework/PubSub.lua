local replicatedStorage = game:GetService("ReplicatedStorage")

local libFinder = require(game
	:GetService("ServerScriptService")
	:WaitForChild("Finders")
	:WaitForChild("LibFinder"))

local rq = libFinder:FindLib("RQuery")

local module = {
	__replicatedStorage = replicatedStorage
}

-- Create ClientServer topic

-- Create ClientServer topic with callback
-- For every RemoteFunction, only one callback can be defined on the server and only one for each client.
-- Aka remote function?

-- Create topic folder
function module:GetOrCreateClientServerTopicCategory( categoryName )
	local eventTopicFolder = self.__replicatedStorage:FindFirstChild("EventTopics")
	if eventTopicFolder == nil then
		eventTopicFolder = rq.CreateFolder("EventTopics", self.__replicatedStorage)
	end

	local categoryFolder = eventTopicFolder:FindFirstChild(categoryName)
	if categoryFolder == nil then
		categoryFolder = rq.CreateFolder(categoryName, eventTopicFolder)
	end

	return categoryFolder
end

-- Create ClientServer topic in folder
function module:GetOrCreateClientServerTopicInCategory(categoryName, topicName)
	local categoryFolder = self:GetOrCreateClientServerTopicCategory(categoryName)

	local topic = categoryFolder:FindFirstChild(topicName)
	if topic == nil then
		topic = Instance.new("RemoteEvent")
		topic.Name = topicName
		topic.Parent = categoryFolder
	end
	return topic
end

-- Subscribe Server to event topic
-- callback params:
--  callback(playerWhoFiredTheEvent, argumentsTuplePassedByFireServer)
-- Receives events generated by RemoteEvent:FireServer()
function module:SubscribeServerToTopicEvent(categoryName, topicName, serverCallback)
	print("Subscribing to event " .. topicName .. " in " .. categoryName)
	local topic = self:GetOrCreateClientServerTopicInCategory(categoryName, topicName)
	topic.OnServerEvent:Connect(serverCallback)
	return topic
end

function module:ConnectEntityListenerFuncToTopic(entityId, categoryName, topic, listenerFunc)
	local gatekeeperClosure = function(listeningEntityId, wrappedListenerFunc)
		local wrapperFunc = function(sender, receiverEntityId)
			if (receiverEntityId ~= nil and receiverEntityId == listeningEntityId) then
				wrappedListenerFunc(sender, receiverEntityId)
			end
		end
		return wrapperFunc
	end
	local subscribedTopic = self:SubscribeServerToTopicEvent(categoryName, 
		topic,
		gatekeeperClosure(entityId, listenerFunc))
	return subscribedTopic
end

return module